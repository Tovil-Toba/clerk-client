/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ContactFacePosition } from '../models/contact-face-position';
import { contactFacePositionsControllerCreate } from '../fn/contact-face-positions/contact-face-positions-controller-create';
import { ContactFacePositionsControllerCreate$Params } from '../fn/contact-face-positions/contact-face-positions-controller-create';
import { contactFacePositionsControllerFindAll } from '../fn/contact-face-positions/contact-face-positions-controller-find-all';
import { ContactFacePositionsControllerFindAll$Params } from '../fn/contact-face-positions/contact-face-positions-controller-find-all';
import { contactFacePositionsControllerFindNames } from '../fn/contact-face-positions/contact-face-positions-controller-find-names';
import { ContactFacePositionsControllerFindNames$Params } from '../fn/contact-face-positions/contact-face-positions-controller-find-names';
import { contactFacePositionsControllerFindOne } from '../fn/contact-face-positions/contact-face-positions-controller-find-one';
import { ContactFacePositionsControllerFindOne$Params } from '../fn/contact-face-positions/contact-face-positions-controller-find-one';
import { contactFacePositionsControllerRemove } from '../fn/contact-face-positions/contact-face-positions-controller-remove';
import { ContactFacePositionsControllerRemove$Params } from '../fn/contact-face-positions/contact-face-positions-controller-remove';
import { contactFacePositionsControllerUpdate } from '../fn/contact-face-positions/contact-face-positions-controller-update';
import { ContactFacePositionsControllerUpdate$Params } from '../fn/contact-face-positions/contact-face-positions-controller-update';
import { DeleteResultDto } from '../models/delete-result-dto';
import { FindAllContactFacePositionsDto } from '../models/find-all-contact-face-positions-dto';
import { FindNamesResultDto } from '../models/find-names-result-dto';


/**
 * Должности контактных лиц
 */
@Injectable({ providedIn: 'root' })
export class ContactFacePositionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactFacePositionsControllerFindAll()` */
  static readonly ContactFacePositionsControllerFindAllPath = '/contact-face-positions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindAll$Response(params?: ContactFacePositionsControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<FindAllContactFacePositionsDto>> {
    return contactFacePositionsControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindAll(params?: ContactFacePositionsControllerFindAll$Params, context?: HttpContext): Observable<FindAllContactFacePositionsDto> {
    return this.contactFacePositionsControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindAllContactFacePositionsDto>): FindAllContactFacePositionsDto => r.body)
    );
  }

  /** Path part for operation `contactFacePositionsControllerCreate()` */
  static readonly ContactFacePositionsControllerCreatePath = '/contact-face-positions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacePositionsControllerCreate$Response(params: ContactFacePositionsControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFacePosition>> {
    return contactFacePositionsControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacePositionsControllerCreate(params: ContactFacePositionsControllerCreate$Params, context?: HttpContext): Observable<ContactFacePosition> {
    return this.contactFacePositionsControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFacePosition>): ContactFacePosition => r.body)
    );
  }

  /** Path part for operation `contactFacePositionsControllerFindNames()` */
  static readonly ContactFacePositionsControllerFindNamesPath = '/contact-face-positions/names';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerFindNames()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindNames$Response(params?: ContactFacePositionsControllerFindNames$Params, context?: HttpContext): Observable<StrictHttpResponse<FindNamesResultDto>> {
    return contactFacePositionsControllerFindNames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerFindNames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindNames(params?: ContactFacePositionsControllerFindNames$Params, context?: HttpContext): Observable<FindNamesResultDto> {
    return this.contactFacePositionsControllerFindNames$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindNamesResultDto>): FindNamesResultDto => r.body)
    );
  }

  /** Path part for operation `contactFacePositionsControllerFindOne()` */
  static readonly ContactFacePositionsControllerFindOnePath = '/contact-face-positions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindOne$Response(params: ContactFacePositionsControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFacePosition>> {
    return contactFacePositionsControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerFindOne(params: ContactFacePositionsControllerFindOne$Params, context?: HttpContext): Observable<ContactFacePosition> {
    return this.contactFacePositionsControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFacePosition>): ContactFacePosition => r.body)
    );
  }

  /** Path part for operation `contactFacePositionsControllerRemove()` */
  static readonly ContactFacePositionsControllerRemovePath = '/contact-face-positions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerRemove$Response(params: ContactFacePositionsControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return contactFacePositionsControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacePositionsControllerRemove(params: ContactFacePositionsControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.contactFacePositionsControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `contactFacePositionsControllerUpdate()` */
  static readonly ContactFacePositionsControllerUpdatePath = '/contact-face-positions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacePositionsControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacePositionsControllerUpdate$Response(params: ContactFacePositionsControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFacePosition>> {
    return contactFacePositionsControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacePositionsControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacePositionsControllerUpdate(params: ContactFacePositionsControllerUpdate$Params, context?: HttpContext): Observable<ContactFacePosition> {
    return this.contactFacePositionsControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFacePosition>): ContactFacePosition => r.body)
    );
  }

}
