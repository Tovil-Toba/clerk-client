/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ContactFace } from '../models/contact-face';
import { contactFacesControllerCreate } from '../fn/contact-faces/contact-faces-controller-create';
import { ContactFacesControllerCreate$Params } from '../fn/contact-faces/contact-faces-controller-create';
import { contactFacesControllerFindAll } from '../fn/contact-faces/contact-faces-controller-find-all';
import { ContactFacesControllerFindAll$Params } from '../fn/contact-faces/contact-faces-controller-find-all';
import { contactFacesControllerFindNames } from '../fn/contact-faces/contact-faces-controller-find-names';
import { ContactFacesControllerFindNames$Params } from '../fn/contact-faces/contact-faces-controller-find-names';
import { contactFacesControllerFindOne } from '../fn/contact-faces/contact-faces-controller-find-one';
import { ContactFacesControllerFindOne$Params } from '../fn/contact-faces/contact-faces-controller-find-one';
import { contactFacesControllerRemove } from '../fn/contact-faces/contact-faces-controller-remove';
import { ContactFacesControllerRemove$Params } from '../fn/contact-faces/contact-faces-controller-remove';
import { contactFacesControllerUpdate } from '../fn/contact-faces/contact-faces-controller-update';
import { ContactFacesControllerUpdate$Params } from '../fn/contact-faces/contact-faces-controller-update';
import { DeleteResultDto } from '../models/delete-result-dto';
import { FindAllContactFacesDto } from '../models/find-all-contact-faces-dto';
import { FindUserNamesResultDto } from '../models/find-user-names-result-dto';


/**
 * Контактные лица
 */
@Injectable({ providedIn: 'root' })
export class ContactFacesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactFacesControllerFindAll()` */
  static readonly ContactFacesControllerFindAllPath = '/contact-faces';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindAll$Response(params: ContactFacesControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<FindAllContactFacesDto>> {
    return contactFacesControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindAll(params: ContactFacesControllerFindAll$Params, context?: HttpContext): Observable<FindAllContactFacesDto> {
    return this.contactFacesControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindAllContactFacesDto>): FindAllContactFacesDto => r.body)
    );
  }

  /** Path part for operation `contactFacesControllerCreate()` */
  static readonly ContactFacesControllerCreatePath = '/contact-faces';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacesControllerCreate$Response(params: ContactFacesControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFace>> {
    return contactFacesControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacesControllerCreate(params: ContactFacesControllerCreate$Params, context?: HttpContext): Observable<ContactFace> {
    return this.contactFacesControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFace>): ContactFace => r.body)
    );
  }

  /** Path part for operation `contactFacesControllerFindNames()` */
  static readonly ContactFacesControllerFindNamesPath = '/contact-faces/names';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerFindNames()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindNames$Response(params?: ContactFacesControllerFindNames$Params, context?: HttpContext): Observable<StrictHttpResponse<FindUserNamesResultDto>> {
    return contactFacesControllerFindNames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerFindNames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindNames(params?: ContactFacesControllerFindNames$Params, context?: HttpContext): Observable<FindUserNamesResultDto> {
    return this.contactFacesControllerFindNames$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindUserNamesResultDto>): FindUserNamesResultDto => r.body)
    );
  }

  /** Path part for operation `contactFacesControllerFindOne()` */
  static readonly ContactFacesControllerFindOnePath = '/contact-faces/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindOne$Response(params: ContactFacesControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFace>> {
    return contactFacesControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerFindOne(params: ContactFacesControllerFindOne$Params, context?: HttpContext): Observable<ContactFace> {
    return this.contactFacesControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFace>): ContactFace => r.body)
    );
  }

  /** Path part for operation `contactFacesControllerRemove()` */
  static readonly ContactFacesControllerRemovePath = '/contact-faces/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerRemove$Response(params: ContactFacesControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return contactFacesControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactFacesControllerRemove(params: ContactFacesControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.contactFacesControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `contactFacesControllerUpdate()` */
  static readonly ContactFacesControllerUpdatePath = '/contact-faces/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactFacesControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacesControllerUpdate$Response(params: ContactFacesControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactFace>> {
    return contactFacesControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactFacesControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactFacesControllerUpdate(params: ContactFacesControllerUpdate$Params, context?: HttpContext): Observable<ContactFace> {
    return this.contactFacesControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactFace>): ContactFace => r.body)
    );
  }

}
