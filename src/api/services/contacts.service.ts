/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Contact } from '../models/contact';
import { contactsControllerCreate } from '../fn/contacts/contacts-controller-create';
import { ContactsControllerCreate$Params } from '../fn/contacts/contacts-controller-create';
import { contactsControllerFindAll } from '../fn/contacts/contacts-controller-find-all';
import { ContactsControllerFindAll$Params } from '../fn/contacts/contacts-controller-find-all';
import { contactsControllerFindOne } from '../fn/contacts/contacts-controller-find-one';
import { ContactsControllerFindOne$Params } from '../fn/contacts/contacts-controller-find-one';
import { contactsControllerRemove } from '../fn/contacts/contacts-controller-remove';
import { ContactsControllerRemove$Params } from '../fn/contacts/contacts-controller-remove';
import { contactsControllerUpdate } from '../fn/contacts/contacts-controller-update';
import { ContactsControllerUpdate$Params } from '../fn/contacts/contacts-controller-update';
import { DeleteResultDto } from '../models/delete-result-dto';
import { FindAllContactsDto } from '../models/find-all-contacts-dto';


/**
 * Контакты
 */
@Injectable({ providedIn: 'root' })
export class ContactsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactsControllerFindAll()` */
  static readonly ContactsControllerFindAllPath = '/contacts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerFindAll$Response(params?: ContactsControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<FindAllContactsDto>> {
    return contactsControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerFindAll(params?: ContactsControllerFindAll$Params, context?: HttpContext): Observable<FindAllContactsDto> {
    return this.contactsControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindAllContactsDto>): FindAllContactsDto => r.body)
    );
  }

  /** Path part for operation `contactsControllerCreate()` */
  static readonly ContactsControllerCreatePath = '/contacts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsControllerCreate$Response(params: ContactsControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<Contact>> {
    return contactsControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsControllerCreate(params: ContactsControllerCreate$Params, context?: HttpContext): Observable<Contact> {
    return this.contactsControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contact>): Contact => r.body)
    );
  }

  /** Path part for operation `contactsControllerFindOne()` */
  static readonly ContactsControllerFindOnePath = '/contacts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerFindOne$Response(params: ContactsControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<Contact>> {
    return contactsControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerFindOne(params: ContactsControllerFindOne$Params, context?: HttpContext): Observable<Contact> {
    return this.contactsControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contact>): Contact => r.body)
    );
  }

  /** Path part for operation `contactsControllerRemove()` */
  static readonly ContactsControllerRemovePath = '/contacts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerRemove$Response(params: ContactsControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return contactsControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactsControllerRemove(params: ContactsControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.contactsControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `contactsControllerUpdate()` */
  static readonly ContactsControllerUpdatePath = '/contacts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactsControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsControllerUpdate$Response(params: ContactsControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<Contact>> {
    return contactsControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactsControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactsControllerUpdate(params: ContactsControllerUpdate$Params, context?: HttpContext): Observable<Contact> {
    return this.contactsControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Contact>): Contact => r.body)
    );
  }

}
