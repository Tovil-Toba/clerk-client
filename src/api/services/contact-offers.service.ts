/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ContactOffer } from '../models/contact-offer';
import { contactOffersControllerCreate } from '../fn/contact-offers/contact-offers-controller-create';
import { ContactOffersControllerCreate$Params } from '../fn/contact-offers/contact-offers-controller-create';
import { contactOffersControllerFindAll } from '../fn/contact-offers/contact-offers-controller-find-all';
import { ContactOffersControllerFindAll$Params } from '../fn/contact-offers/contact-offers-controller-find-all';
import { contactOffersControllerFindOne } from '../fn/contact-offers/contact-offers-controller-find-one';
import { ContactOffersControllerFindOne$Params } from '../fn/contact-offers/contact-offers-controller-find-one';
import { contactOffersControllerRemove } from '../fn/contact-offers/contact-offers-controller-remove';
import { ContactOffersControllerRemove$Params } from '../fn/contact-offers/contact-offers-controller-remove';
import { contactOffersControllerUpdate } from '../fn/contact-offers/contact-offers-controller-update';
import { ContactOffersControllerUpdate$Params } from '../fn/contact-offers/contact-offers-controller-update';
import { DeleteResultDto } from '../models/delete-result-dto';
import { UpdateResultDto } from '../models/update-result-dto';


/**
 * Предложения контактов
 */
@Injectable({ providedIn: 'root' })
export class ContactOffersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contactOffersControllerFindAll()` */
  static readonly ContactOffersControllerFindAllPath = '/contact-offers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactOffersControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerFindAll$Response(params?: ContactOffersControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<any>>> {
    return contactOffersControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactOffersControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerFindAll(params?: ContactOffersControllerFindAll$Params, context?: HttpContext): Observable<Array<any>> {
    return this.contactOffersControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<any>>): Array<any> => r.body)
    );
  }

  /** Path part for operation `contactOffersControllerCreate()` */
  static readonly ContactOffersControllerCreatePath = '/contact-offers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactOffersControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactOffersControllerCreate$Response(params: ContactOffersControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactOffer>> {
    return contactOffersControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactOffersControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactOffersControllerCreate(params: ContactOffersControllerCreate$Params, context?: HttpContext): Observable<ContactOffer> {
    return this.contactOffersControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactOffer>): ContactOffer => r.body)
    );
  }

  /** Path part for operation `contactOffersControllerFindOne()` */
  static readonly ContactOffersControllerFindOnePath = '/contact-offers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactOffersControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerFindOne$Response(params: ContactOffersControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactOffer>> {
    return contactOffersControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactOffersControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerFindOne(params: ContactOffersControllerFindOne$Params, context?: HttpContext): Observable<ContactOffer> {
    return this.contactOffersControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactOffer>): ContactOffer => r.body)
    );
  }

  /** Path part for operation `contactOffersControllerRemove()` */
  static readonly ContactOffersControllerRemovePath = '/contact-offers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactOffersControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerRemove$Response(params: ContactOffersControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return contactOffersControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactOffersControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contactOffersControllerRemove(params: ContactOffersControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.contactOffersControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `contactOffersControllerUpdate()` */
  static readonly ContactOffersControllerUpdatePath = '/contact-offers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contactOffersControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactOffersControllerUpdate$Response(params: ContactOffersControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdateResultDto>> {
    return contactOffersControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contactOffersControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contactOffersControllerUpdate(params: ContactOffersControllerUpdate$Params, context?: HttpContext): Observable<UpdateResultDto> {
    return this.contactOffersControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdateResultDto>): UpdateResultDto => r.body)
    );
  }

}
