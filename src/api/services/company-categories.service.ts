/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyCategoriesControllerCreate } from '../fn/company-categories/company-categories-controller-create';
import { CompanyCategoriesControllerCreate$Params } from '../fn/company-categories/company-categories-controller-create';
import { companyCategoriesControllerFindAll } from '../fn/company-categories/company-categories-controller-find-all';
import { CompanyCategoriesControllerFindAll$Params } from '../fn/company-categories/company-categories-controller-find-all';
import { companyCategoriesControllerFindNames } from '../fn/company-categories/company-categories-controller-find-names';
import { CompanyCategoriesControllerFindNames$Params } from '../fn/company-categories/company-categories-controller-find-names';
import { companyCategoriesControllerFindOne } from '../fn/company-categories/company-categories-controller-find-one';
import { CompanyCategoriesControllerFindOne$Params } from '../fn/company-categories/company-categories-controller-find-one';
import { companyCategoriesControllerRemove } from '../fn/company-categories/company-categories-controller-remove';
import { CompanyCategoriesControllerRemove$Params } from '../fn/company-categories/company-categories-controller-remove';
import { companyCategoriesControllerUpdate } from '../fn/company-categories/company-categories-controller-update';
import { CompanyCategoriesControllerUpdate$Params } from '../fn/company-categories/company-categories-controller-update';
import { CompanyCategory } from '../models/company-category';
import { DeleteResultDto } from '../models/delete-result-dto';
import { FindAllCompanyCategoriesDto } from '../models/find-all-company-categories-dto';
import { FindNamesResultDto } from '../models/find-names-result-dto';


/**
 * Категории компаний
 */
@Injectable({ providedIn: 'root' })
export class CompanyCategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyCategoriesControllerFindAll()` */
  static readonly CompanyCategoriesControllerFindAllPath = '/company-categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindAll$Response(params?: CompanyCategoriesControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<FindAllCompanyCategoriesDto>> {
    return companyCategoriesControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindAll(params?: CompanyCategoriesControllerFindAll$Params, context?: HttpContext): Observable<FindAllCompanyCategoriesDto> {
    return this.companyCategoriesControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindAllCompanyCategoriesDto>): FindAllCompanyCategoriesDto => r.body)
    );
  }

  /** Path part for operation `companyCategoriesControllerCreate()` */
  static readonly CompanyCategoriesControllerCreatePath = '/company-categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCategoriesControllerCreate$Response(params: CompanyCategoriesControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyCategory>> {
    return companyCategoriesControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCategoriesControllerCreate(params: CompanyCategoriesControllerCreate$Params, context?: HttpContext): Observable<CompanyCategory> {
    return this.companyCategoriesControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyCategory>): CompanyCategory => r.body)
    );
  }

  /** Path part for operation `companyCategoriesControllerFindNames()` */
  static readonly CompanyCategoriesControllerFindNamesPath = '/company-categories/names';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerFindNames()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindNames$Response(params?: CompanyCategoriesControllerFindNames$Params, context?: HttpContext): Observable<StrictHttpResponse<FindNamesResultDto>> {
    return companyCategoriesControllerFindNames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerFindNames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindNames(params?: CompanyCategoriesControllerFindNames$Params, context?: HttpContext): Observable<FindNamesResultDto> {
    return this.companyCategoriesControllerFindNames$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindNamesResultDto>): FindNamesResultDto => r.body)
    );
  }

  /** Path part for operation `companyCategoriesControllerFindOne()` */
  static readonly CompanyCategoriesControllerFindOnePath = '/company-categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindOne$Response(params: CompanyCategoriesControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyCategory>> {
    return companyCategoriesControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerFindOne(params: CompanyCategoriesControllerFindOne$Params, context?: HttpContext): Observable<CompanyCategory> {
    return this.companyCategoriesControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyCategory>): CompanyCategory => r.body)
    );
  }

  /** Path part for operation `companyCategoriesControllerRemove()` */
  static readonly CompanyCategoriesControllerRemovePath = '/company-categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerRemove$Response(params: CompanyCategoriesControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return companyCategoriesControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyCategoriesControllerRemove(params: CompanyCategoriesControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.companyCategoriesControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `companyCategoriesControllerUpdate()` */
  static readonly CompanyCategoriesControllerUpdatePath = '/company-categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyCategoriesControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCategoriesControllerUpdate$Response(params: CompanyCategoriesControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<CompanyCategory>> {
    return companyCategoriesControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyCategoriesControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyCategoriesControllerUpdate(params: CompanyCategoriesControllerUpdate$Params, context?: HttpContext): Observable<CompanyCategory> {
    return this.companyCategoriesControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompanyCategory>): CompanyCategory => r.body)
    );
  }

}
