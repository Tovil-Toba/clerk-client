/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { DeleteResultDto } from '../models/delete-result-dto';
import { FindAllManagersDto } from '../models/find-all-managers-dto';
import { FindUserNamesResultDto } from '../models/find-user-names-result-dto';
import { Manager } from '../models/manager';
import { managersControllerCreate } from '../fn/managers/managers-controller-create';
import { ManagersControllerCreate$Params } from '../fn/managers/managers-controller-create';
import { managersControllerFindAll } from '../fn/managers/managers-controller-find-all';
import { ManagersControllerFindAll$Params } from '../fn/managers/managers-controller-find-all';
import { managersControllerFindNames } from '../fn/managers/managers-controller-find-names';
import { ManagersControllerFindNames$Params } from '../fn/managers/managers-controller-find-names';
import { managersControllerFindOne } from '../fn/managers/managers-controller-find-one';
import { ManagersControllerFindOne$Params } from '../fn/managers/managers-controller-find-one';
import { managersControllerRemove } from '../fn/managers/managers-controller-remove';
import { ManagersControllerRemove$Params } from '../fn/managers/managers-controller-remove';
import { managersControllerUpdate } from '../fn/managers/managers-controller-update';
import { ManagersControllerUpdate$Params } from '../fn/managers/managers-controller-update';


/**
 * Менеджеры
 */
@Injectable({ providedIn: 'root' })
export class ManagersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `managersControllerFindAll()` */
  static readonly ManagersControllerFindAllPath = '/managers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindAll$Response(params?: ManagersControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<FindAllManagersDto>> {
    return managersControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindAll(params?: ManagersControllerFindAll$Params, context?: HttpContext): Observable<FindAllManagersDto> {
    return this.managersControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindAllManagersDto>): FindAllManagersDto => r.body)
    );
  }

  /** Path part for operation `managersControllerCreate()` */
  static readonly ManagersControllerCreatePath = '/managers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  managersControllerCreate$Response(params: ManagersControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<Manager>> {
    return managersControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  managersControllerCreate(params: ManagersControllerCreate$Params, context?: HttpContext): Observable<Manager> {
    return this.managersControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Manager>): Manager => r.body)
    );
  }

  /** Path part for operation `managersControllerFindNames()` */
  static readonly ManagersControllerFindNamesPath = '/managers/names';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerFindNames()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindNames$Response(params?: ManagersControllerFindNames$Params, context?: HttpContext): Observable<StrictHttpResponse<FindUserNamesResultDto>> {
    return managersControllerFindNames(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerFindNames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindNames(params?: ManagersControllerFindNames$Params, context?: HttpContext): Observable<FindUserNamesResultDto> {
    return this.managersControllerFindNames$Response(params, context).pipe(
      map((r: StrictHttpResponse<FindUserNamesResultDto>): FindUserNamesResultDto => r.body)
    );
  }

  /** Path part for operation `managersControllerFindOne()` */
  static readonly ManagersControllerFindOnePath = '/managers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindOne$Response(params: ManagersControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<Manager>> {
    return managersControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerFindOne(params: ManagersControllerFindOne$Params, context?: HttpContext): Observable<Manager> {
    return this.managersControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<Manager>): Manager => r.body)
    );
  }

  /** Path part for operation `managersControllerRemove()` */
  static readonly ManagersControllerRemovePath = '/managers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerRemove$Response(params: ManagersControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<DeleteResultDto>> {
    return managersControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  managersControllerRemove(params: ManagersControllerRemove$Params, context?: HttpContext): Observable<DeleteResultDto> {
    return this.managersControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeleteResultDto>): DeleteResultDto => r.body)
    );
  }

  /** Path part for operation `managersControllerUpdate()` */
  static readonly ManagersControllerUpdatePath = '/managers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `managersControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  managersControllerUpdate$Response(params: ManagersControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<Manager>> {
    return managersControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `managersControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  managersControllerUpdate(params: ManagersControllerUpdate$Params, context?: HttpContext): Observable<Manager> {
    return this.managersControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Manager>): Manager => r.body)
    );
  }

}
