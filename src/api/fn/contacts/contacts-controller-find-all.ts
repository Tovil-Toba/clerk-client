/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { BooleanFilterEnum } from '../../models/boolean-filter-enum';
import { ContactStatusEnum } from '../../models/contact-status-enum';
import { DateFilterEnum } from '../../models/date-filter-enum';
import { NumberFilterEnum } from '../../models/number-filter-enum';
import { OrderEnum } from '../../models/order-enum';
import { StringFilterEnum } from '../../models/string-filter-enum';

export interface ContactsControllerFindAll$Params {

/**
 * **Название компании**
 */
  'company.name'?: string;

/**
 * Фильтр
 */
  'company.name-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'company.name-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'company.name-orderPlace'?: number;

/**
 * **Идентификатор компании**
 */
  companyId?: string;

/**
 * Фильтр
 */
  'companyId-filter'?: NumberFilterEnum;

/**
 * Порядок сортировки
 */
  'companyId-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'companyId-orderPlace'?: number;

/**
 * **Дата контакта**
 */
  contactDate?: string;

/**
 * Фильтр
 */
  'contactDate-filter'?: DateFilterEnum;

/**
 * Порядок сортировки
 */
  'contactDate-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'contactDate-orderPlace'?: number;

/**
 * **Имя контактного лица**
 */
  'contactFace.name.first'?: string;

/**
 * Фильтр
 */
  'contactFace.name.first-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'contactFace.name.first-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'contactFace.name.first-orderPlace'?: number;

/**
 * **Фамилия контактного лица**
 */
  'contactFace.name.last'?: string;

/**
 * Фильтр
 */
  'contactFace.name.last-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'contactFace.name.last-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'contactFace.name.last-orderPlace'?: number;

/**
 * **Отчество контактного лица**
 */
  'contactFace.name.middle'?: string;

/**
 * Фильтр
 */
  'contactFace.name.middle-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'contactFace.name.middle-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'contactFace.name.middle-orderPlace'?: number;

/**
 * **Идентификатор контактного лица**
 */
  contactFaceId?: string;

/**
 * Фильтр
 */
  'contactFaceId-filter'?: NumberFilterEnum;

/**
 * Порядок сортировки
 */
  'contactFaceId-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'contactFaceId-orderPlace'?: number;

/**
 * **Дата создания**
 */
  createdAt?: string;

/**
 * Фильтр
 */
  'createdAt-filter'?: DateFilterEnum;

/**
 * Порядок сортировки
 */
  'createdAt-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'createdAt-orderPlace'?: number;

/**
 * **Описание**
 */
  description?: string;

/**
 * Фильтр
 */
  'description-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'description-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'description-orderPlace'?: number;

/**
 * **Идентификатор**
 */
  id?: string;

/**
 * Фильтр
 */
  'id-filter'?: NumberFilterEnum;

/**
 * Порядок сортировки
 */
  'id-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'id-orderPlace'?: number;

/**
 * **Активная**
 */
  isActive?: BooleanFilterEnum;

/**
 * Порядок сортировки
 */
  'isActive-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'isActive-orderPlace'?: number;

/**
 * **Имя менеджера**
 */
  'manager.name.first'?: string;

/**
 * Фильтр
 */
  'manager.name.first-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'manager.name.first-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'manager.name.first-orderPlace'?: number;

/**
 * **Фамилия менеджера**
 */
  'manager.name.last'?: string;

/**
 * Фильтр
 */
  'manager.name.last-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'manager.name.last-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'manager.name.last-orderPlace'?: number;

/**
 * **Отчество менеджера**
 */
  'manager.name.middle'?: string;

/**
 * Фильтр
 */
  'manager.name.middle-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'manager.name.middle-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'manager.name.middle-orderPlace'?: number;

/**
 * **Идентификатор менеджера**
 */
  managerId?: string;

/**
 * Фильтр
 */
  'managerId-filter'?: NumberFilterEnum;

/**
 * Порядок сортировки
 */
  'managerId-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'managerId-orderPlace'?: number;

/**
 * **Дата следующего контакта**
 */
  nextContactDate?: string;

/**
 * Фильтр
 */
  'nextContactDate-filter'?: DateFilterEnum;

/**
 * Порядок сортировки
 */
  'nextContactDate-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'nextContactDate-orderPlace'?: number;

/**
 * **Предложение**
 */
  'offer.name'?: string;

/**
 * Фильтр
 */
  'offer.name-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'offer.name-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'offer.name-orderPlace'?: number;

/**
 * **Телефоны**
 */
  phones?: string;

/**
 * Фильтр
 */
  'phones-filter'?: StringFilterEnum;

/**
 * Порядок сортировки
 */
  'phones-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'phones-orderPlace'?: number;

/**
 * **Статус**
 */
  status?: ContactStatusEnum;

/**
 * **Дата обновления**
 */
  updatedAt?: string;

/**
 * Фильтр
 */
  'updatedAt-filter'?: DateFilterEnum;

/**
 * Порядок сортировки
 */
  'updatedAt-order'?: OrderEnum;

/**
 * Приоритет сортировки  
 * *Чем меньше, тем приоритетнее*
 */
  'updatedAt-orderPlace'?: number;

/**
 * **Смещение**  
 * *Без заданного ограничения работать не будет*
 */
  offset?: number;

/**
 * **Ограничение**
 */
  limit?: number;
}

export function contactsControllerFindAll(http: HttpClient, rootUrl: string, params?: ContactsControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<any>>> {
  const rb = new RequestBuilder(rootUrl, contactsControllerFindAll.PATH, 'get');
  if (params) {
    rb.query('company.name', params['company.name'], {"explode":false});
    rb.query('company.name-filter', params['company.name-filter'], {"explode":false});
    rb.query('company.name-order', params['company.name-order'], {"explode":false});
    rb.query('company.name-orderPlace', params['company.name-orderPlace'], {});
    rb.query('companyId', params.companyId, {"explode":false});
    rb.query('companyId-filter', params['companyId-filter'], {"explode":false});
    rb.query('companyId-order', params['companyId-order'], {"explode":false});
    rb.query('companyId-orderPlace', params['companyId-orderPlace'], {});
    rb.query('contactDate', params.contactDate, {"explode":false});
    rb.query('contactDate-filter', params['contactDate-filter'], {"explode":false});
    rb.query('contactDate-order', params['contactDate-order'], {"explode":false});
    rb.query('contactDate-orderPlace', params['contactDate-orderPlace'], {});
    rb.query('contactFace.name.first', params['contactFace.name.first'], {"explode":false});
    rb.query('contactFace.name.first-filter', params['contactFace.name.first-filter'], {"explode":false});
    rb.query('contactFace.name.first-order', params['contactFace.name.first-order'], {"explode":false});
    rb.query('contactFace.name.first-orderPlace', params['contactFace.name.first-orderPlace'], {});
    rb.query('contactFace.name.last', params['contactFace.name.last'], {"explode":false});
    rb.query('contactFace.name.last-filter', params['contactFace.name.last-filter'], {"explode":false});
    rb.query('contactFace.name.last-order', params['contactFace.name.last-order'], {"explode":false});
    rb.query('contactFace.name.last-orderPlace', params['contactFace.name.last-orderPlace'], {});
    rb.query('contactFace.name.middle', params['contactFace.name.middle'], {"explode":false});
    rb.query('contactFace.name.middle-filter', params['contactFace.name.middle-filter'], {"explode":false});
    rb.query('contactFace.name.middle-order', params['contactFace.name.middle-order'], {"explode":false});
    rb.query('contactFace.name.middle-orderPlace', params['contactFace.name.middle-orderPlace'], {});
    rb.query('contactFaceId', params.contactFaceId, {"explode":false});
    rb.query('contactFaceId-filter', params['contactFaceId-filter'], {"explode":false});
    rb.query('contactFaceId-order', params['contactFaceId-order'], {"explode":false});
    rb.query('contactFaceId-orderPlace', params['contactFaceId-orderPlace'], {});
    rb.query('createdAt', params.createdAt, {"explode":false});
    rb.query('createdAt-filter', params['createdAt-filter'], {"explode":false});
    rb.query('createdAt-order', params['createdAt-order'], {"explode":false});
    rb.query('createdAt-orderPlace', params['createdAt-orderPlace'], {});
    rb.query('description', params.description, {"explode":false});
    rb.query('description-filter', params['description-filter'], {"explode":false});
    rb.query('description-order', params['description-order'], {"explode":false});
    rb.query('description-orderPlace', params['description-orderPlace'], {});
    rb.query('id', params.id, {"explode":false});
    rb.query('id-filter', params['id-filter'], {"explode":false});
    rb.query('id-order', params['id-order'], {"explode":false});
    rb.query('id-orderPlace', params['id-orderPlace'], {});
    rb.query('isActive', params.isActive, {"explode":false});
    rb.query('isActive-order', params['isActive-order'], {"explode":false});
    rb.query('isActive-orderPlace', params['isActive-orderPlace'], {});
    rb.query('manager.name.first', params['manager.name.first'], {"explode":false});
    rb.query('manager.name.first-filter', params['manager.name.first-filter'], {"explode":false});
    rb.query('manager.name.first-order', params['manager.name.first-order'], {"explode":false});
    rb.query('manager.name.first-orderPlace', params['manager.name.first-orderPlace'], {});
    rb.query('manager.name.last', params['manager.name.last'], {"explode":false});
    rb.query('manager.name.last-filter', params['manager.name.last-filter'], {"explode":false});
    rb.query('manager.name.last-order', params['manager.name.last-order'], {"explode":false});
    rb.query('manager.name.last-orderPlace', params['manager.name.last-orderPlace'], {});
    rb.query('manager.name.middle', params['manager.name.middle'], {"explode":false});
    rb.query('manager.name.middle-filter', params['manager.name.middle-filter'], {"explode":false});
    rb.query('manager.name.middle-order', params['manager.name.middle-order'], {"explode":false});
    rb.query('manager.name.middle-orderPlace', params['manager.name.middle-orderPlace'], {});
    rb.query('managerId', params.managerId, {"explode":false});
    rb.query('managerId-filter', params['managerId-filter'], {"explode":false});
    rb.query('managerId-order', params['managerId-order'], {"explode":false});
    rb.query('managerId-orderPlace', params['managerId-orderPlace'], {});
    rb.query('nextContactDate', params.nextContactDate, {"explode":false});
    rb.query('nextContactDate-filter', params['nextContactDate-filter'], {"explode":false});
    rb.query('nextContactDate-order', params['nextContactDate-order'], {"explode":false});
    rb.query('nextContactDate-orderPlace', params['nextContactDate-orderPlace'], {});
    rb.query('offer.name', params['offer.name'], {"explode":false});
    rb.query('offer.name-filter', params['offer.name-filter'], {"explode":false});
    rb.query('offer.name-order', params['offer.name-order'], {"explode":false});
    rb.query('offer.name-orderPlace', params['offer.name-orderPlace'], {});
    rb.query('phones', params.phones, {"explode":false});
    rb.query('phones-filter', params['phones-filter'], {"explode":false});
    rb.query('phones-order', params['phones-order'], {"explode":false});
    rb.query('phones-orderPlace', params['phones-orderPlace'], {});
    rb.query('status', params.status, {"explode":false});
    rb.query('updatedAt', params.updatedAt, {"explode":false});
    rb.query('updatedAt-filter', params['updatedAt-filter'], {"explode":false});
    rb.query('updatedAt-order', params['updatedAt-order'], {"explode":false});
    rb.query('updatedAt-orderPlace', params['updatedAt-orderPlace'], {});
    rb.query('offset', params.offset, {});
    rb.query('limit', params.limit, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<any>>;
    })
  );
}

contactsControllerFindAll.PATH = '/contacts';
